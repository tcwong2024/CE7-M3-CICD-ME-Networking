name: WF4 CD-Terraform Apply [Setup VPC OR Destroy]
run-name: Running CD Terraform Apply Pipeline by ${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy (DEV, UAT, PROD)"
        required: true
        default: "DEV"
      action:
        description: "Action to perform (Apply or Destroy)"
        required: true
        default: "Apply"

jobs:
  Terraform-Apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    outputs:
      status: ${{ job.status }}

    env:
      TF_VERSION: 1.5.6
      AWS_REGION: ${{ vars.REGION_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.REGION_NAME }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Select Terraform Workspace
        run: terraform workspace select ${{ github.event.inputs.environment }} 

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply or Destroy
        env:
          TF_VAR_region:
            ${{ github.event.inputs.environment == 'DEV' && vars.DEV_REGION ||
            github.event.inputs.environment == 'UAT' && vars.UAT_REGION ||
            github.event.inputs.environment == 'PROD' && vars.PROD_REGION }}

        run: |
          if [ "${{ github.event.inputs.action }}" == "Apply" ]; then
            terraform apply  -auto-approve
          elif [ "${{ github.event.inputs.action }}" == "Destroy" ]; then
            terraform destroy  -auto-approve
          fi

  Summary:
    needs: [Terraform-Apply]
    runs-on: ubuntu-latest
    steps:
      - name: Adding markdown
        run: |
          TF_STATUS=${{ needs.Terraform-Apply.outputs.status }}
          ACTION=${{ github.event.inputs.action }}

          echo '## ðŸš€ Preparing Build Summary ðŸš€' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

          echo "| Job Name        | Status | Action |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform-Apply    | $TF_STATUS | $ACTION  |" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

          echo '## Job ran by: ${{ github.actor }}' >> $GITHUB_STEP_SUMMARY
